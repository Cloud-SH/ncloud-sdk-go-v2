/*
 * api
 *
 * Search Engine Service(VPC) Open API<br/>https://vpcsearchengine.apigw.ntruss.com/api/v2)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package vses2

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type v2ApiService service

/*
v2ApiService Add Nodes In Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no
 * @param changeCountOfDataNode changeCountOfDataNode

@return ResponseVoboolean
*/
func (a *v2ApiService) AddNodesInClusterUsingPOST(ctx context.Context, serviceGroupNo string, changeCountOfDataNode *AddNodesInClusterRequestVo) (ResponseVoboolean, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoboolean
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/changeCountOfDataNode/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &changeCountOfDataNode
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Create Search Engine Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param createCluster createCluster

@return ResponseVoCreateClusterResponseVo
*/
func (a *v2ApiService) CreateClusterUsingPOST(ctx context.Context, createCluster CreateClusterRequestVo) (ResponseVoCreateClusterResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoCreateClusterResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/createSearchEngineCluster"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/json;charset=UTF-8"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &createCluster
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Delete Search Engine Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no

@return ResponseVoboolean
*/
func (a *v2ApiService) DeleteClusterUsingDELETE(ctx context.Context, serviceGroupNo string) (ResponseVoboolean, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoboolean
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/deleteSearchEngineCluster/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Search Engine Cluster ACG Information
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no

@return ResponseVoGetOpenApiAcgInfoList
*/
func (a *v2ApiService) GetAcgInfoListUsingGET(ctx context.Context, serviceGroupNo string) (ResponseVoGetOpenApiAcgInfoList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetOpenApiAcgInfoList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getAcgInfoList/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Search Engine Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no

@return ResponseVoOpenApiGetClusterInfoResponseVo
*/
func (a *v2ApiService) GetClusterInfoUsingGET(ctx context.Context, serviceGroupNo string) (ResponseVoOpenApiGetClusterInfoResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoOpenApiGetClusterInfoResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getClusterInfo/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
V2ControllerApiService Get Search Engine Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *V2ControllerApiGetClusterInfoListUsingGETOpts - Optional Parameters:
     * @param "PageNo" (optional.Int32) -  page no, default 1
     * @param "PageSize" (optional.Int32) -  page size, default 10
     * @param "ServerStatus" (optional.String) -
     * @param "ClusterStatus" (optional.String) -
     * @param "SearchField" (optional.String) -
     * @param "InputText" (optional.String) -
     * @param "SubAccountNo" (optional.String) -
     * @param "IsOwner" (optional.Bool) -
     * @param "ZoneNo" (optional.String) -
     * @param "SortedBy" (optional.String) -
     * @param "SortingOrder" (optional.String) -
     * @param "VpcName" (optional.String) -
     * @param "MemberNo" (optional.String) -

@return ResponseVoGetSearchEngineClusterInfoListResponse
*/

type V2ControllerApiGetClusterInfoListUsingGETOpts struct {
	PageNo    int
	PageSize  int
	InputText string
	VpcName   string
}

func (a *v2ApiService) GetClusterInfoListUsingGET(ctx context.Context, localVarOptionals *V2ControllerApiGetClusterInfoListUsingGETOpts) (ResponseVoGetSearchEngineClusterInfoListResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetSearchEngineClusterInfoListResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getClusterInfoList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && &localVarOptionals.PageNo != nil {
		localVarQueryParams.Add("pageNo", parameterToString(localVarOptionals.PageNo, ""))
	}
	if localVarOptionals != nil && &localVarOptionals.PageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(localVarOptionals.PageSize, ""))
	}
	if localVarOptionals != nil && &localVarOptionals.InputText != nil {
		localVarQueryParams.Add("inputText", parameterToString(localVarOptionals.InputText, ""))
	}
	if localVarOptionals != nil && &localVarOptionals.VpcName != nil {
		localVarQueryParams.Add("vpcName", parameterToString(localVarOptionals.VpcName, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Search Engine Cluster Node List
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no

@return ResponseVoGetOpenApiServiceGroupResponseVo
*/
func (a *v2ApiService) GetClusterNodeListUsingGET(ctx context.Context, serviceGroupNo string) (ResponseVoGetOpenApiServiceGroupResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetOpenApiServiceGroupResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getClusterNodeList/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Node Product List
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param *v2ApiGetNodeProductListWithGetMethodUsingGETOpts - Parameters:
     * @param "SoftwareProductCode" (string) -
     * @param "SubnetNo" (int32) -

@return ResponseVoGetOpenApiHwProductListResponseVo
*/

type V2ApiGetNodeProductListWithGetMethodUsingGETOpts struct {
	SoftwareProductCode string `json:"softwareProductCode,omitempty"`
	SubnetNo            int32  `json:"subnetNo,omitempty"`
}

func (a *v2ApiService) GetNodeProductListWithGetMethodUsingGET(ctx context.Context, localVarOptionals *V2ApiGetNodeProductListWithGetMethodUsingGETOpts) (ResponseVoGetOpenApiHwProductListResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetOpenApiHwProductListResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getNodeProductList?softwareProductCode={software-product-code}&subnetNo={subnet-no}"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && &localVarOptionals.SoftwareProductCode != nil {
		localVarPath = strings.Replace(localVarPath, "{"+"software-product-code"+"}", fmt.Sprintf("%v", parameterToString(localVarOptionals.SoftwareProductCode, "")), -1)
	}

	if localVarOptionals != nil && &localVarOptionals.SubnetNo != nil {
		localVarPath = strings.Replace(localVarPath, "{"+"subnet-no"+"}", fmt.Sprintf("%v", parameterToString(localVarOptionals.SubnetNo, "")), -1)
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Software Product List
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseVoGetOpenApiOsProductListResponseVo
*/
func (a *v2ApiService) GetOsProductListUsingGET(ctx context.Context) (ResponseVoGetOpenApiOsProductListResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetOpenApiOsProductListResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getOsProductList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Get Search Engine Version List
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseVoGetSearchEngineVersionListResponseVo
*/
func (a *v2ApiService) GetSearchEngineVersionListUsingGET(ctx context.Context) (ResponseVoGetSearchEngineVersionListResponseVo, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoGetSearchEngineVersionListResponseVo
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/getSearchEngineVersionList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Reset Search Engine User Password
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no
 * @param request request

@return ResponseVoboolean
*/
func (a *v2ApiService) ResetSearchEngineUserPasswordUsingPOST(ctx context.Context, serviceGroupNo string, request *ResetSearchEngineUserPasswordRequestVo) (ResponseVoboolean, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoboolean
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/resetSearchEngineUserPassword/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/json;charset=UTF-8"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &request
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
v2ApiService Restart Search Engine Cluster
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serviceGroupNo service-group-no

@return ResponseVoboolean
*/
func (a *v2ApiService) RestartClusterUsingGET(ctx context.Context, serviceGroupNo string) (ResponseVoboolean, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ResponseVoboolean
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/cluster/restartSearchEngineCluster/{service-group-no}"
	localVarPath = strings.Replace(localVarPath, "{"+"service-group-no"+"}", fmt.Sprintf("%v", serviceGroupNo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	defer localVarHttpResponse.Body.Close()
	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)

	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	if err := json.Unmarshal(localVarBody, &localVarReturnValue); err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
